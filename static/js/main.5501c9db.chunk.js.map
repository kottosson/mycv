{"version":3,"sources":["Mix/KO.jpg","Components/Header.js","Components/Education.js","Components/Jobs.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","CVheader","className","src","KO","Education","props","school","year","degree","Jobs","workPlace","jobYear","jobName","jobDescription1","jobDescription2","jobDescription3","jobDescription4","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gFAAAA,EAAOC,QAAU,IAA0B,gC,8KCkB5BC,MAff,WACI,OACI,yBAAKC,UAAU,UACX,6BACI,mDACA,wBAAIA,UAAU,cAAd,qCACA,wBAAIA,UAAU,cAAd,mBAEJ,yBAAKA,UAAU,eAAeC,IAAKC,QCMhCC,MAdf,SAAmBC,GACf,OACI,yBAAKJ,UAAU,oBACX,yBAAKA,UAAU,iBACX,wBAAIA,UAAU,cAAcI,EAAMC,QAClC,wBAAIL,UAAU,cAAcI,EAAME,OAEtC,6BAAMF,EAAMG,QACZ,sECYGC,MArBf,SAAcJ,GACV,OACI,yBAAKJ,UAAU,cACX,yBAAKA,UAAU,WACX,wBAAIA,UAAU,cAAcI,EAAMK,WAClC,wBAAIT,UAAU,cAAcI,EAAMM,UAEtC,uBAAGV,UAAU,WAAWI,EAAMO,SAC9B,6BACI,4BACI,4BAAKP,EAAMQ,iBACX,4BAAKR,EAAMS,iBACX,4BAAKT,EAAMU,iBACX,4BAAKV,EAAMW,qBCgChBC,MAvCf,WACE,OACE,yBAAKhB,UAAU,aACb,kBAAC,EAAD,MACA,0CACA,kBAAC,EAAD,CACES,UAAU,aACVC,QAAQ,mBACRC,QAAQ,sCACRC,gBAAgB,iGAChBC,gBAAgB,iGAChBC,gBAAgB,2GAChBC,gBAAgB,uDAEhB,kBAAC,EAAD,CACAN,UAAU,aACVC,QAAQ,mBACRC,QAAQ,sCACRC,gBAAgB,iGAChBC,gBAAgB,iGAChBC,gBAAgB,2GAChBC,gBAAgB,uDAClB,yCACA,kBAAC,EAAD,CACEV,OAAO,2BACPC,KAAK,YACLC,OAAO,2CACT,kBAAC,EAAD,CACEF,OAAO,2BACPC,KAAK,YACLC,OAAO,cC1BKU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5501c9db.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/KO.ffb59961.jpg\";","import React from 'react';\nimport KO from '/Users/ko/Desktop/Coding/React/mycv/src/Mix/KO.jpg'\n\nfunction CVheader(){\n    return(\n        <div className=\"header\">\n            <div>\n                <h1>Kjartan Ottósson</h1>\n                <h3 className=\"headerInfo\">Email: kjartan.ottosson@gmail.com</h3>\n                <h3 className=\"headerInfo\">Phone: 8490319</h3>\n            </div>\n            <img className=\"profilePhoto\" src={KO}></img>\n            \n        </div>\n    );\n}\n\n\nexport default CVheader","import React from 'react';\n\n\nfunction Education(props){\n    return(\n        <div className=\"educationWrapper\">\n            <div className=\"educationInfo\">\n                <h3 className=\"schoolInfo\">{props.school}</h3> \n                <h3 className=\"schoolInfo\">{props.year}</h3>\n            </div>\n            <div>{props.degree}</div>\n            <div>Bara allt gott og blessað þar</div>\n        </div>\n    );\n}\n\n\nexport default Education","import React from 'react';\n\nfunction Jobs(props){\n    return(\n        <div className=\"jobWrapper\">\n            <div className=\"jobInfo\">\n                <h3 className=\"schoolInfo\">{props.workPlace}</h3>\n                <h3 className=\"schoolInfo\">{props.jobYear}</h3>\n            </div>\n            <p className=\"jobName\">{props.jobName}</p>\n            <div>\n                <ul>\n                    <li>{props.jobDescription1}</li>\n                    <li>{props.jobDescription2}</li>\n                    <li>{props.jobDescription3}</li>\n                    <li>{props.jobDescription4}</li>\n                </ul>\n            </div>\n        </div>\n    );\n}\n\n\nexport default Jobs","import React from 'react';\nimport './App.css';\nimport CVheader from './Components/Header.js'\nimport Education from './Components/Education.js'\nimport Jobs from './Components/Jobs.js'\nimport {Container,Row,Col} from 'react-bootstrap';\n\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <CVheader />\n      <h1>Experience</h1>\n      <Jobs \n        workPlace=\"Icelandair\"\n        jobYear=\"Nov 2019-Present\"\n        jobName=\"Pricing Analyst, Revenue Management\"\n        jobDescription1=\"Ábyrgur fyrir verðlagningu á tilgreindum mörkuðum í leiðakerfi Icelandair\"\n        jobDescription2=\"Eftirlit með tekjuinnflæði, ákvörðunartaka um framboð og verðlagningu.\"\n        jobDescription3=\"Greining á vöruframboði, verðstrúktúr og hegðun samkeppnisaðila á markaði.\"\n        jobDescription4=\"Kynningar fyrir yfirmenn og aðra samstarfsmenn.\"/>\n\n        <Jobs \n        workPlace=\"Icelandair\"\n        jobYear=\"Nov 2019-Present\"\n        jobName=\"Pricing Analyst, Revenue Management\"\n        jobDescription1=\"Ábyrgur fyrir verðlagningu á tilgreindum mörkuðum í leiðakerfi Icelandair\"\n        jobDescription2=\"Eftirlit með tekjuinnflæði, ákvörðunartaka um framboð og verðlagningu.\"\n        jobDescription3=\"Greining á vöruframboði, verðstrúktúr og hegðun samkeppnisaðila á markaði.\"\n        jobDescription4=\"Kynningar fyrir yfirmenn og aðra samstarfsmenn.\"/>\n      <h1>Education</h1>\n      <Education \n        school=\"Háskóli Íslands\" \n        year=\"2013-2016\"\n        degree=\"Magister juris (MA), Lögfræði\"/>\n      <Education \n        school=\"Háskóli Íslands\" \n        year=\"2013-2016\"\n        degree=\"Masters\"/>\n        \n      \n    </div>\n  \n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}